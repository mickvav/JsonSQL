.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "JsonSQL 3pm"
.TH JsonSQL 3pm "2017-07-29" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JsonSQL \- JsonSQL distribution. A collection of modules for generating safe SQL from JSON strings.
.SH "VERSION"
.IX Header "VERSION"
version 0.4
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This is a set of modules used to turn a \s-1JSON\s0 string representing an \s-1SQL\s0 query into an appropriate \s-1SQL\s0 statement.
.PP
For example,
.PP
.Vb 1
\&    use JsonSQL::Query::Select;
\&    
\&    my $jsonString = \*(Aq{
\&        "fields": [
\&            {"column": "*"}
\&        ],
\&        "from": [
\&            {"table": "my_table"}
\&        ]
\&    }\*(Aq;
\&    
\&    my $whitelisting_rules = [
\&        { schema => \*(Aq#anySchema\*(Aq, \*(Aqmy_table\*(Aq => [ \*(Aq#anyColumn\*(Aq ] }
\&    ];
\&    
\&    my $selectObj = JsonSQL::Query::Select\->new($whitelisting_rules, $jsonString);
\&    my ( $sql, $binds ) = $selectObj\->get_select;
.Ve
.PP
Generates:
.PP
.Vb 2
\&    $sql = \*(AqSELECT * FROM \*(Aqmy_table\*(Aq;
\&    $binds = <arrayref of parameterized values, if applicable>
.Ve
.PP
Now you can go ahead and use \f(CW$sql\fR and \f(CW$binds\fR directly with the \s-1DBI\s0 module to do the query.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The purpose of this distribution is to provide a reasonably safe mechanism for \s-1SQL\s0 query generation using data from untrusted sources, namely
web browsers. \s-1JSON\s0 is a convenient format native to JavaScript (ECMAScript), which can be translated to and from Perl objects fairly easily. 
\&\s-1JSON\s0 was selected to provide a structured format for representing \s-1SQL\s0 statements such that it can be validated, checked for appropriate
access restrictions, and used to generate a well-formed and parameterized \s-1SQL\s0 statement that can be passed off to the \s-1DBI\s0 module.
.PP
The format is somewhat verbose in a few places, with the idea that the user/developer needs to be very explicit when passing parameters
to the query. This makes it well-suited for handling untrusted data (for example, from \s-1HTML\s0 forms), but if you just need a basic \s-1SQL\s0
generator, you would probably be better off looking at SQL::Abstract or SQL::Maker instead.
.PP
A simple \s-1SELECT\s0 statement,
.PP
.Vb 8
\&    {
\&        "fields": [
\&            {"column": "*"}
\&        ],
\&        "from": [
\&            {"table": "my_table"}
\&        ]
\&    }
.Ve
.PP
A more complicated \s-1SELECT\s0 statement,
.PP
.Vb 10
\&    {
\&        "fields": [
\&            {"column": "field1"},
\&            {"column": "field2", "alias": "test"}
\&        ],
\&        "from": [
\&            {"table": "table1", "schema": "MySchema"}
\&        ], 
\&        "where": {
\&            "and": [
\&                { "eq": {"field": {"column": "field2"}, "value": "Test.Field2"} },
\&                { "eq": {"field": {"column": "field1"}, "value": "453.6"} },
\&                { "or": [
\&                    { "eq": {"field": {"column": "field2"}, "value": "field3"} },
\&                    { "gt": {"field": {"column": "field3"}, "value": "45"} }
\&                ]}
\&            ]
\&        }
\&    }
.Ve
.PP
A \s-1SELECT\s0 statement with JOINs,
.PP
.Vb 10
\&    {
\&        "fields": [
\&            {"column": "field1"},
\&            {"column": "field2", "alias": "test"}
\&        ],
\&        "joins": [
\&            {"jointype": "inner", "from": {"table": "table1", "schema": "MySchema"}, "to": {"table": "table2", "schema": "MySchema"}, "on": {"eq": {"field": {"column": "field2"}, "value": {"column": "field1"}} }}
\&        ],
\&        "where": {
\&            "and": [
\&                { "eq": {"field": {"column": "field2"}, "value": "Test.Field2"} },
\&                { "eq": {"field": {"column": "field1"}, "value": "453.6"} },
\&                { "or": [
\&                    { "eq": {"field": {"column": "field2"}, "value": "field3"} },
\&                    { "gt": {"field": {"column": "field3"}, "value": "45"} }
\&                ]}
\&            ]
\&        }
\&    }
.Ve
.PP
A couple of \s-1INSERT\s0 statements,
.PP
.Vb 10
\&    {
\&        "inserts": [
\&            {
\&                "table": {"table": "table1", "schema": "MySchema"},
\&                "values": [
\&                    {"column": "column1", "value": "value1"},
\&                    {"column": "column2", "value": "value2"}
\&                ],
\&                "returning": [{"column": "column1", "as": "bestcolumn"}, {"column": "column2"}]
\&            },
\&            {
\&                "table": {"table": "table2"},
\&                "values": [
\&                    {"column": "columnA", "value": "valueA"},
\&                    {"column": "columnB", "value": "valueB"}
\&                ]
\&            }
\&    ]}
.Ve
.PP
For more detailed information, see the main query modules,
.IP "JsonSQL::Query::Select for \s-1SELECT\s0 statements" 4
.IX Item "JsonSQL::Query::Select for SELECT statements"
.PD 0
.IP "JsonSQL::Query::Insert for \s-1INSERT\s0 statements" 4
.IX Item "JsonSQL::Query::Insert for INSERT statements"
.PD
.PP
An important feature of this distribution is whitelisting of allowed table and column identifiers. The whitelisting rules are defined
in the format,
.PP
.Vb 8
\&    [
\&        {
\&            schema => \*(AqschemaName\*(Aq || \*(Aq#anySchema\*(Aq,
\&            <\*(Aq#anyTable\*(Aq || allowedTableName1 => [ \*(Aq#anyColumn\*(Aq || allowedFieldName1, allowedFieldName2, ... ]>,
\&            <... additional table rules ...>
\&        },
\&        < ... additional rule sets ... >
\&    ]
.Ve
.PP
and are saved in the query object when it is created. Subsequent building of the \s-1SQL\s0 statement examines this whitelist and returns an
error if table/column identifiers are used that have not been explicitly allowed. This allows \s-1JSON\s0 query generation and processing to
be safely separated and handled by different modules. The generating module (ex: a JavaScript client) is responsible for generating 
the query in stringified \s-1JSON\s0 format, and the processing module (ex: \s-1CGI\s0 script) is responsible for validating and processing that \s-1JSON\s0
query into an \s-1SQL\s0 statement.
.PP
** Important Takeaway: JsonSQL query object construction and \s-1SQL\s0 generation will fail if you have not defined any whitelisting rules. **
.PP
It is not recommended, but you can disable the whitelisting module by defining a permissive rule,
.PP
.Vb 1
\&    [ { schema => \*(Aq#anySchema\*(Aq, \*(Aq#anyTable\*(Aq } ]
.Ve
.PP
For more information on the whitelisting module, and how to construct rule sets, see the JsonSQL::Validator module.
.SH "METHODS"
.IX Header "METHODS"
.SS "Methods"
.IX Subsection "Methods"
This module is a documentation stub and does not contain any code. For detailed \s-1API\s0 information, see the appropriate modules.
.PP
For users, the main JsonSQL Query modules,
.IP "\(bu" 4
JsonSQL::Query::Select
.IP "\(bu" 4
JsonSQL::Query::Insert
.PP
For a description of the whitelisting feature,
.IP "\(bu" 4
JsonSQL::Validator
.PP
For developers,
.IP "\(bu" 4
The module used for returning errors:
.Sp
JsonSQL::Error
.IP "\(bu" 4
To create a new schema,
.Sp
JsonSQL::Schemas::Schema
.Sp
Examples: JsonSQL::Schemas::select and JsonSQL::Schemas::insert
.IP "\(bu" 4
To create a new query object,
.Sp
JsonSQL::Query::Query
.Sp
If your aim is to add additional features to an existing query object, you may also need to extend the schema.
If you are supporting a completely new query type, you will need to write an appropriate schema for it.
.IP "\(bu" 4
To create additional query parameters,
.Sp
The individual JsonSQL::Param modules have a lot of documentation.
Start with JsonSQL::Param::Tables or JsonSQL::Param::Fields to see how they work and how they integrate whitelist validation.
For WHERE-like parameters, see JsonSQL::Param::Condition and JsonSQL::Param::ConditionDispatcher.
.SH "Changes"
.IX Header "Changes"
.IP "\fI0.1 \- 0.3\fR" 4
.IX Item "0.1 - 0.3"
Internal Development
.IP "\fI0.4\fR" 4
.IX Item "0.4"
First public release
.SH "TODO"
.IX Header "TODO"
A short list, in more-or-less relative priority, of things I would like to change/fix as time allows.
.IP "\(bu" 4
Deprecate SQL::Maker dependency.
.Sp
This is only useful for \s-1SELECT\s0 queries, and there are a fair amount of bugs that need to be worked around. To strengthen feature support,
a full SQL-generating backend needs to be written.
.IP "\(bu" 4
Support Common Table Expressions (CTEs) and subqueries.
.IP "\(bu" 4
Support additional query types: \s-1UPDATE, DELETE \s0( and maybe \s-1CREATE, DROP \s0).
.IP "\(bu" 4
Support database-specific drivers to better deal with database-specific nuances.
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Hoefler <bhoefler@draper.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2017 by Chris Hoefler.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
