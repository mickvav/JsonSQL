.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "JsonSQL::Schemas::Schema 3pm"
.TH JsonSQL::Schemas::Schema 3pm "2017-07-29" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JsonSQL::Schemas::Schema \- JSON schema base class. Used as a dispatcher for loading JSON schema objects used by JsonSQL::Validator.
.SH "VERSION"
.IX Header "VERSION"
version 0.4
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This is a supporting module used by JsonSQL::Validator for loading \s-1JSON\s0 schemas.
.PP
To use this:
.PP
.Vb 6
\&    my $schema = JsonSQL::Schemas::Schema\->load_schema(<schema_name>);
\&    if ( eval { $schema\->is_error } ) {
\&        return "Could not load JSON schema: $schema\->{message}";
\&    } else {
\&        ...
\&    }
.Ve
.PP
<schemaname> must be a module residing in JsonSQL::Schemas that is a subclass of this one. See, for example,
.IP "\(bu" 4
JsonSQL::Schemas::select
.IP "\(bu" 4
JsonSQL::Schemas::insert
.PP
If you desire other \s-1JSON\s0 schemas you can create your own...
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructor new \-> JsonSQL::Schemas::Schema"
.IX Subsection "Constructor new -> JsonSQL::Schemas::Schema"
An inherited constructor for creating the blessed object reference. This should not be called directly. Instead use load_schema.
.SS "Dispatcher load_schema($jsonSchema) \-> JsonSQL::Schemas<schema>"
.IX Subsection "Dispatcher load_schema($jsonSchema) -> JsonSQL::Schemas<schema>"
Serves as a dispatcher method to load the appropriate subclass for the specified \f(CW$jsonSchema\fR.
.PP
.Vb 1
\&    $jsonSchema         => The name of the JSON schema to load.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Hoefler <bhoefler@draper.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2017 by Chris Hoefler.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
