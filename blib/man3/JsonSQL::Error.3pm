.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "JsonSQL::Error 3pm"
.TH JsonSQL::Error 3pm "2017-07-29" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JsonSQL::Error \- Defines an error object to be used at various stages of JSON validation and SQL generation.
.SH "VERSION"
.IX Header "VERSION"
version 0.4
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
To use this:
.PP
.Vb 1
\&    return JsonSQL::Error\->new(<error_type>, <error_msg>);
.Ve
.PP
To check return values for errors:
.PP
.Vb 6
\&    my $retval = myFunc();
\&    if ( eval { $retval\->is_error } ) {
\&        return "An error occurred: $retval\->{message}";
\&    } else {
\&        ...
\&    }
.Ve
.PP
This module was inspired by Brian D Foy's post on The Effective Perler,
<https://www.effectiveperlprogramming.com/2011/10/return\-error\-objects\-instead\-of\-throwing\-exceptions/>
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "Constructor new($type, $message)"
.el .SS "Constructor new($type, \f(CW$message\fP)"
.IX Subsection "Constructor new($type, $message)"
Instantiates and returns a new JsonSQL::Error object.
.PP
.Vb 2
\&    $type      => Any string to group error messages by.
\&    $message   => The error message.
.Ve
.SS "ObjectMethod is_error \-> 1"
.IX Subsection "ObjectMethod is_error -> 1"
Returns a true value. Used for conveniently catching errors:
.PP
.Vb 3
\&    if ( eval { $result\->is_error } ) {
\&      die $result\->{message};
\&    }
.Ve
.ie n .SS "ObjectMethod \fItype()\fP \-> $type"
.el .SS "ObjectMethod \fItype()\fP \-> \f(CW$type\fP"
.IX Subsection "ObjectMethod type() -> $type"
Returns the type property. Useful for adding for/when loops to error handlers:
.PP
.Vb 10
\&    for ( $result\->type ) {
\&      when ( \*(Aqvalidate\*(Aq ) {
\&        $err = "JSON schema validation error: <br />";
\&        $err .= "$result\->{message} <br />";
\&        $err =~ s/\en/\e<br \e/\e>/;
\&      }
\&      default {
\&        $err = "An unspecified error occurred. <br />";
\&      }
\&    }
.Ve
.ie n .SS "ObjectMethod \fIstringify()\fP \-> $string"
.el .SS "ObjectMethod \fIstringify()\fP \-> \f(CW$string\fP"
.IX Subsection "ObjectMethod stringify() -> $string"
Stringifies the error object and returns it.
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Hoefler <bhoefler@draper.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2017 by Chris Hoefler.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
