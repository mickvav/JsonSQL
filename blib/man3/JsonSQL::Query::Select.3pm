.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "JsonSQL::Query::Select 3pm"
.TH JsonSQL::Query::Select 3pm "2017-07-29" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JsonSQL::Query::Select \- JsonSQL::Query::Select object. Stores a Perl representation of a SELECT statement created from a JSON string.
.SH "VERSION"
.IX Header "VERSION"
version 0.4
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Use this to generate an \s-1SQL SELECT\s0 statement from a \s-1JSON\s0 string.
.PP
To use this:
.PP
.Vb 1
\&    use JsonSQL::Query::Select;
\&    
\&    my $jsonString = \*(Aq{
\&        "fields": [
\&            {"column": "*"}
\&        ],
\&        "from": [
\&            {"table": "my_table"}
\&        ]
\&    }\*(Aq;
\&    
\&    my $whitelisting_rules = [
\&        { schema => \*(Aq#anySchema\*(Aq, \*(Aqmy_table\*(Aq => [ \*(Aq#anyColumn\*(Aq ] }
\&    ];
\&    
\&    my ( $selectObj, $err ) = JsonSQL::Query::Select\->new($whitelisting_rules, $jsonString);
\&    if ( $selectObj ) {
\&        my ( $sql, $binds ) = $selectObj\->get_select;
\&        <...>
\&    } else {
\&        die $err;
\&    }
.Ve
.PP
Now you can go ahead and use \f(CW$sql\fR and \f(CW$binds\fR directly with the \s-1DBI\s0 module to do the query.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a JsonSQL Query module that supports \s-1SQL\s0 generation for a broad range of the most common \s-1SQL SELECT\s0 features, including JOINs.
.PP
Examples of \s-1SELECT\s0 features supported by this module:
.SS "A simple \s-1SELECT\s0 statement (minimum),"
.IX Subsection "A simple SELECT statement (minimum),"
.Vb 8
\&    {
\&        "fields": [
\&            {"column": "*"}
\&        ],
\&        "from": [
\&            {"table": "my_table"}
\&        ]
\&    }
.Ve
.SS "A more complicated \s-1SELECT\s0 statement,"
.IX Subsection "A more complicated SELECT statement,"
.Vb 10
\&    {
\&        "fields": [
\&            {"column": "field1"},
\&            {"column": "field2", "alias": "test"}
\&        ],
\&        "from": [
\&            {"table": "table1", "schema": "MySchema"}
\&        ], 
\&        "where": {
\&            "and": [
\&                { "eq": {"field": {"column": "field2"}, "value": "Test.Field2"} },
\&                { "eq": {"field": {"column": "field1"}, "value": "453.6"} },
\&                { "or": [
\&                    { "eq": {"field": {"column": "field2"}, "value": "field3"} },
\&                    { "gt": {"field": {"column": "field3"}, "value": "45"} }
\&                ]}
\&            ]
\&        }
\&    }
.Ve
.SS "A \s-1SELECT\s0 statement with JOINs,"
.IX Subsection "A SELECT statement with JOINs,"
.Vb 10
\&    {
\&        "fields": [
\&            {"column": "field1"},
\&            {"column": "field2", "alias": "test"}
\&        ],
\&        "joins": [
\&            {"jointype": "inner", "from": {"table": "table1", "schema": "MySchema"}, "to": {"table": "table2", "schema": "MySchema"}, "on": {"eq": {"field": {"column": "field2"}, "value": {"column": "field1"}} }}
\&        ],
\&        "where": {
\&            "and": [
\&                { "eq": {"field": {"column": "field2"}, "value": "Test.Field2"} },
\&                { "eq": {"field": {"column": "field1"}, "value": "453.6"} },
\&                { "or": [
\&                    { "eq": {"field": {"column": "field2"}, "value": "field3"} },
\&                    { "gt": {"field": {"column": "field3"}, "value": "45"} }
\&                ]}
\&            ]
\&        }
\&    }
.Ve
.SS "Mapping of \s-1JSON\s0 object properties to \s-1SELECT\s0 parameters:"
.IX Subsection "Mapping of JSON object properties to SELECT parameters:"
\fIRequired,\fR
.IX Subsection "Required,"
.ie n .IP "fields => [ { table => ""table1"", column => ""column1"" }, { table => ""table1"", column => ""column2"" } ]" 4
.el .IP "fields => [ { table => ``table1'', column => ``column1'' }, { table => ``table1'', column => ``column2'' } ]" 4
.IX Item "fields => [ { table => table1, column => column1 }, { table => table1, column => column2 } ]"
.Vb 2
\&    Generates: \*(Aqtable1\*(Aq.\*(Aqcolumn1\*(Aq, \*(Aqtable1\*(Aq.\*(Aqcolumn2\*(Aq
\&See L<JsonSQL::Param::Fields> and L<JsonSQL::Param::Field> for more info.
.Ve
.ie n .IP "from => [ { schema => ""myschema"", table = ""table1"" } ] ( if you are using a \s-1JOIN,\s0 you can omit the \s-1FROM \s0)" 4
.el .IP "from => [ { schema => ``myschema'', table = ``table1'' } ] ( if you are using a \s-1JOIN,\s0 you can omit the \s-1FROM \s0)" 4
.IX Item "from => [ { schema => myschema, table = table1 } ] ( if you are using a JOIN, you can omit the FROM )"
.Vb 2
\&    Generates FROM \*(Aqmyschema\*(Aq.\*(Aqtable1\*(Aq
\&See L<JsonSQL::Param::Tables> and L<JsonSQL::Param::Table> for more info.
.Ve
.PP
\fIOptional,\fR
.IX Subsection "Optional,"
.ie n .IP "joins => [ { jointype => ""inner"", from => { table => ""table1"" }, to => { table => ""table2"" }, on => { eq => { field => { table => ""table1"", column => ""column1"" }, value => { table => ""table2"", column: ""column2""}} } } ]" 4
.el .IP "joins => [ { jointype => ``inner'', from => { table => ``table1'' }, to => { table => ``table2'' }, on => { eq => { field => { table => ``table1'', column => ``column1'' }, value => { table => ``table2'', column: ``column2''}} } } ]" 4
.IX Item "joins => [ { jointype => inner, from => { table => table1 }, to => { table => table2 }, on => { eq => { field => { table => table1, column => column1 }, value => { table => table2, column: column2}} } } ]"
.Vb 2
\&    Generates: FROM \*(Aqtable1\*(Aq INNER JOIN \*(Aqtable2\*(Aq ON \*(Aqtable1\*(Aq.\*(Aqcolumn1\*(Aq = \*(Aqtable2\*(Aq.\*(Aqcolumn2\*(Aq
\&See L<JsonSQL::Param::Joins> and L<JsonSQL::Param::Join> for more info.
.Ve
.ie n .IP "where => { eq => { field => { table => ""table1"", column => ""column1"" }, value => 32 } }" 4
.el .IP "where => { eq => { field => { table => ``table1'', column => ``column1'' }, value => 32 } }" 4
.IX Item "where => { eq => { field => { table => table1, column => column1 }, value => 32 } }"
.Vb 3
\&    Generates: WHERE \*(Aqtable1\*(Aq.\*(Aqcolumn1\*(Aq = ?
\&        Bind: [ 32 ]
\&See L<JsonSQL::Param::Condition> and L<JsonSQL::Param::ConditionDispatcher> for more info.
.Ve
.ie n .IP "orderby => [ { field => { table => ""table1"", column => ""column1"" }, order => '\s-1ASC\s0'} ]" 4
.el .IP "orderby => [ { field => { table => ``table1'', column => ``column1'' }, order => '\s-1ASC\s0'} ]" 4
.IX Item "orderby => [ { field => { table => table1, column => column1 }, order => 'ASC'} ]"
.Vb 2
\&    Generates: ORDER BY \*(Aqtable\*(Aq.\*(Aqcolumn1\*(Aq ASC
\&See L<JsonSQL::Param::OrderBy> and L<JsonSQL::Param::Order> for more info.
.Ve
.ie n .IP "groupby => [ { table => ""table1"", column => ""column1"" } ]" 4
.el .IP "groupby => [ { table => ``table1'', column => ``column1'' } ]" 4
.IX Item "groupby => [ { table => table1, column => column1 } ]"
.Vb 2
\&    Generates: GROUP BY \*(Aqtable1\*(Aq.\*(Aqcolumn1\*(Aq
\&See L<JsonSQL::Param::Fields> and L<JsonSQL::Param::Field> for more info.
.Ve
.ie n .IP "having => { eq => { field => { table => ""table1"", column => ""column1"" }, value => 32 } }" 4
.el .IP "having => { eq => { field => { table => ``table1'', column => ``column1'' }, value => 32 } }" 4
.IX Item "having => { eq => { field => { table => table1, column => column1 }, value => 32 } }"
.Vb 3
\&    Generates: HAVING \*(Aqtable1\*(Aq.\*(Aqcolumn1\*(Aq = ?
\&        Bind: [ 32 ]
\&See L<JsonSQL::Param::Condition> and L<JsonSQL::Param::ConditionDispatcher> for more info.
.Ve
.IP "distinct => 'true'" 4
.IX Item "distinct => 'true'"
.Vb 1
\&    Generates: DISTINCT
.Ve
.IP "limit => 23" 4
.IX Item "limit => 23"
.Vb 2
\&    Generates: LIMIT ?
\&        Bind: [ 23 ]
.Ve
.IP "offset => 12" 4
.IX Item "offset => 12"
.Vb 2
\&    Generates: OFFSET ?
\&        Bind: [ 12 ]
.Ve
.PP
\fIAdditional Properties,\fR
.IX Subsection "Additional Properties,"
.IP "defaultschema => 'myschema'" 4
.IX Item "defaultschema => 'myschema'"
If you are using \s-1DB\s0 schemas, this property can be used to generate the schema identifier for your queries. Particularly useful for
per-user \s-1DB\s0 schemas.
.PP
See JsonSQL::Schemas::select to view the restrictions enforced by the \s-1JSON\s0 schema.
.SS "Whitelisting Module"
.IX Subsection "Whitelisting Module"
A set of whitelisting rules is required to successfully use this module to generate \s-1SQL.\s0 See JsonSQL::Validator to learn how this works.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "Constructor new($query_rulesets, $json_query)"
.el .SS "Constructor new($query_rulesets, \f(CW$json_query\fP)"
.IX Subsection "Constructor new($query_rulesets, $json_query)"
Instantiates and returns a new JsonSQL::Query::Select object.
.PP
.Vb 2
\&    $query_rulesets      => The whitelisting rules to validate the query with.
\&    $json_query          => A stringified JSON object representing the query.
.Ve
.PP
Returns (0, <error message>) on failure.
.ie n .SS "ObjectMethod get_select \-> ( $sql, $binds )"
.el .SS "ObjectMethod get_select \-> ( \f(CW$sql\fP, \f(CW$binds\fP )"
.IX Subsection "ObjectMethod get_select -> ( $sql, $binds )"
Generates the \s-1SQL\s0 statement represented by the object. Returns:
.PP
.Vb 2
\&    $sql            => An SQL SELECT string.
\&    $binds          => An arrayref of parameterized values to pass to the query.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Hoefler <bhoefler@draper.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2017 by Chris Hoefler.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
