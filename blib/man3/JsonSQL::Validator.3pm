.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "JsonSQL::Validator 3pm"
.TH JsonSQL::Validator 3pm "2017-07-29" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JsonSQL::Validator \- JSON schema validation module. Returns a JsonSQL::Validator object for validating a JSON string against a pre\-defined schema.
.SH "VERSION"
.IX Header "VERSION"
version 0.4
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This is a supporting module used by JsonSQL::Query modules.
.PP
To use this:
.PP
.Vb 7
\&    my $validator = JsonSQL::Validator\->new(<json_schema_name>, <whitelisting_rule_set>);
\&    my $perldata = $validator\->validate_schema(<json_string>);
\&    if ( eval { $perldata\->is_error } ) {
\&        return "$perldata\->{message}";
\&    } else {
\&        ...
\&    }
.Ve
.PP
To use the whitelisting module:
.PP
.Vb 11
\&    my $table_rules = $validator\->check_table_allowed({ schema => <schemaname>, table => <tablename> });
\&    if ( eval { $table_rules\->is_error } ) {
\&        return "Use of table failed access check: $table_rules\->{message}";
\&    } else {
\&        my $allowedField = $validator\->check_field_allowed($table_rules, <fieldname>);
\&        if ( eval { $allowedField\->is_error } ) {
\&            return "Use of field in table failed access check: $allowedField\->{message}";
\&        } else {
\&            ...
\&        }
\&    }
.Ve
.PP
For more information on the whitelisting module, and how to construct rule sets, see documentation below.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "Constructor new($jsonSchema, $ruleSets) \-> JsonSQL::Validator"
.el .SS "Constructor new($jsonSchema, \f(CW$ruleSets\fP) \-> JsonSQL::Validator"
.IX Subsection "Constructor new($jsonSchema, $ruleSets) -> JsonSQL::Validator"
Loads the specified \f(CW$jsonSchema\fR and creates a JSON::Validator instance with it. A reference to the validator and to the provided
whitelisting rule sets is saved in the object before it is returned. If an error occurs during schema loading, a JsonSQL::Error object
is returned.
.PP
.Vb 2
\&    $jsonSchema     => The JSON schema to load. Must be present in JsonSQL::Schemas as a subclass of JsonSQL::Schemas::Schema.
\&    $ruleSets       => An array of whitelisting rules to be applied when a JsonSQL query object is being constructed (see below).
.Ve
.SS "ObjectMethod validate_schema($json) \-> \e%hash"
.IX Subsection "ObjectMethod validate_schema($json) -> %hash"
Parses the provided \s-1JSON\s0 string into a Perl data structure, and then uses the stored JSON::Validator to validate it
against the specified schema (a JsonSQL::Schemas::<schema>). If the process fails at any step, it will return a JsonSQL::Error object
with an appropriate error message. If successful, a Perl data structure (depends on the schema, but usually a hashref)
representing the \s-1SQL\s0 query is returned.
.PP
.Vb 1
\&    $json        => The JSON string to validate. Must be valid JSON.
.Ve
.SS "PrivateMethod _getRuleSets($schemaString) \-> \e@array"
.IX Subsection "PrivateMethod _getRuleSets($schemaString) -> @array"
Searches the \f(CW@ruleSets\fR array for the specified \f(CW$schemaString\fR and returns all matching rule sets.
.PP
.Vb 1
\&    $schemaString       => Name of schema to match for identifying rulesets.
\&
\&    Matches a rule set if ( $schemaString eq $ruleSet\->{schema} || $ruleSet\->{schema} eq \*(Aq#anySchema\*(Aq ).
.Ve
.ie n .SS "PrivateMethod _getTableRules($tableString, $ruleSet) \-> \e@array"
.el .SS "PrivateMethod _getTableRules($tableString, \f(CW$ruleSet\fP) \-> \e@array"
.IX Subsection "PrivateMethod _getTableRules($tableString, $ruleSet) -> @array"
Looks at each table rule in the \e@ruleSet array and returns it if it matches the specified \f(CW$tableString\fR.
.PP
.Vb 2
\&    $tableString       => Name of table to match for identifying table rules.
\&    $ruleSet           => The @\eruleSet array to search for table matches.
\&
\&    Matches table rules of the form ( $ruleSet\->{$tableString} || $ruleSet\->{\*(Aq#anyTable\*(Aq} ).
.Ve
.SS "ObjectMethod check_table_allowed($tableObj) \-> \e@array"
.IX Subsection "ObjectMethod check_table_allowed($tableObj) -> @array"
Determines whether access to a table is allowed by the current stored rule set. If yes, a set of table rules applicable to the table is
returned to use for column verification. If no, a JsonSQL::Error object is returned.
.PP
.Vb 2
\&    $tableObj           => Name of table to match for identifying table rules.
\&    Takes the form { schema => <schemaname>, table => <tablename> }
.Ve
.ie n .SS "ObjectMethod check_field_allowed($table_rules, $field) \-> 1 || JsonSQL::Error"
.el .SS "ObjectMethod check_field_allowed($table_rules, \f(CW$field\fP) \-> 1 || JsonSQL::Error"
.IX Subsection "ObjectMethod check_field_allowed($table_rules, $field) -> 1 || JsonSQL::Error"
Determines whether access to a column is allowed by the supplied table rules. If yes, a true value is returned. If no, 
a JsonSQL::Error object is returned.
.PP
.Vb 2
\&    $table_rules           => Array of table rules as returned by check_table_allowed.
\&    $field                 => The name of the field to check.
.Ve
.SH "Whitelisting Module"
.IX Header "Whitelisting Module"
To provide some basic whitelisting support for table and column identifiers, a set of whitelisting rules is saved in the
JsonSQL::Validator object when it is being created. The rules take the form of an \e@arrayref as follows:
.PP
.Vb 8
\&        [
\&            {
\&                schema => \*(AqschemaName\*(Aq || \*(Aq#anySchema\*(Aq,
\&                <\*(Aq#anyTable\*(Aq || allowedTableName1 => [ \*(Aq#anyColumn\*(Aq || allowedFieldName1, allowedFieldName2, ... ]>,
\&                <... additional table rules ...>
\&            },
\&            < ... additional rule sets ... >
\&        ]
.Ve
.PP
Rule sets are generally grouped by schema. If you are not using schemas (or you are using a \s-1DB\s0 that doesn't support them), you will have
to provide a rule set with the schema property set to '#anySchema'. Whitelisting security is enabled and restrictive by default, so 
at least one rule set will have to be defined in order to create JsonSQL query objects. If you want to disable whitelisting security
(not recommended), use this rule set,
.PP
.Vb 1
\&    [ { schema = \*(Aq#anySchema\*(Aq, \*(Aq#anyTable\*(Aq } ]
.Ve
.PP
The above allows access to all tables in any schema. Column restrictions are not meaningful without table restrictions, so table rules 
have to be defined if you want column restrictions. You can have more than one rule set per schema, but in this case the most 
restrictive rule set will be the one that takes precedent. This behavior can be used as an effective way to disable access to specific 
schemas. For example,
.PP
.Vb 4
\&    [
\&        { schema => \*(Aq#anySchema\*(Aq, \*(Aq#anyTable\*(Aq },
\&        { schema => \*(AqforbiddenSchema\*(Aq }
\&    ]
.Ve
.PP
will first allow access to all tables in any schema, and then restrict access to any table in 'forbiddenSchema'. Table verification and
column verification take place in separate steps. During table verification, rule sets are selected based on the schema property. The
remaining keys in each rule set \f(CW%hash\fR correspond to tables that the query object is allowed access to.
.PP
If there is a key in the rule set with the special name '#anyTable', access to any table in that rule set (schema) will be allowed.
For other keys (table names), the value needs to be set to an array of column names. During column verification, this list will be 
used to determine whether the query object has access to particular columns in the table.
.PP
As with schemas, access to a table can be governed by more than one 'table rule'. In this case, the most restrictive rule is the one 
that takes precedent. For example,
.PP
.Vb 3
\&    [
\&        { schema => \*(AqallowedSchema\*(Aq, \*(Aq#anyTable\*(Aq, \*(AqallowedTable\*(Aq => [ \*(AqallowedColumnA\*(Aq, \*(AqallowedColumnB\*(Aq ] }
\&    ]
.Ve
.PP
will allow access to all columns of all tables in the schema 'allowedSchema', but for the table 'allowedTable', only access to
columns 'allowedColumnA' and 'allowedColumnB' is allowed. Similarly,
.PP
.Vb 3
\&    [
\&        { schema => \*(AqallowedSchema\*(Aq, \*(Aq#anyTable\*(Aq, \*(AqforbiddenTable\*(Aq => [] }
\&    ]
.Ve
.PP
will allow access to all columns of all tables in the schema 'allowedSchema', but block access to the table 'forbiddenTable'.
(Technically, it is only blocking access to the columns in that table, but this is effectively the same thing for most \s-1SQL\s0 operations).
.PP
If the column list contains the special string '#anyColumn' access to all columns in the table will be allowed. So,
.PP
.Vb 3
\&    [
\&        { schema => \*(AqallowedSchema\*(Aq, \*(AqallowedTable1\*(Aq => [ \*(Aq#anyColumn\*(Aq ], \*(AqallowedTable2\*(Aq => [ \*(AqallowedColumn1\*(Aq ] }
\&    ]
.Ve
.PP
will allow access to any column in 'allowedTable1' and only column 'allowedColumn1' of 'allowedTable2'. Access to all other tables
in 'allowedSchema' will be blocked.
.PP
This module is designed to err on the side of caution, and in so doing will always take the more restrictive course of action in the
case of ambiguity. As such, many \s-1SQL\s0 queries will probably fail validation if you don't use fully-qualified table and column identifiers,
which is generally recommended as good practice when writing \s-1SQL\s0 queries anyway. However, if you are writing simple queries and find this 
to be annoying, you can turn off whitelisting and rely only on database-level security.
.PP
It is important to note that while this module aims to reduce the attack surface, it is \s-1NOT\s0 a replacement for database-level security. But
when combined with good database-level security (ex: per-user schemas and Kerberos), it provides for reasonably safe \s-1SQL\s0 query generation
using data from untrusted sources (ex: web browsers).
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Hoefler <bhoefler@draper.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2017 by Chris Hoefler.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
