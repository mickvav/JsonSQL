.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "JsonSQL::Param::Tables 3pm"
.TH JsonSQL::Param::Tables 3pm "2017-07-29" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JsonSQL::Param::Tables \- JsonSQL::Param::Tables object. Stores an array of JsonSQL::Param::Table objects to use for constructing JsonSQL::Query objects.
.SH "VERSION"
.IX Header "VERSION"
version 0.4
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module constructs a Perl object container of JsonSQL::Param::Table objects.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\fIObject properties:\fR
.IX Subsection "Object properties:"
.IP "Array of JsonSQL::Param::Table objects." 4
.IX Item "Array of JsonSQL::Param::Table objects."
.PP
\fIGenerated parameters:\fR
.IX Subsection "Generated parameters:"
.ie n .IP "$tablesArray => \e@arrayref" 4
.el .IP "\f(CW$tablesArray\fR => \e@arrayref" 4
.IX Item "$tablesArray => @arrayref"
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "Constructor new($tablesarrayref, $queryObj)"
.el .SS "Constructor new($tablesarrayref, \f(CW$queryObj\fP)"
.IX Subsection "Constructor new($tablesarrayref, $queryObj)"
Instantiates and returns a new JsonSQL::Param::Tables object, which is an array of JsonSQL::Param::Table objects.
.PP
.Vb 2
\&    $tablesarrayref             => An arrayref of table hashes used to construct the object.
\&    $queryObj                   => A reference to the JsonSQL::Query object that will own this object.
.Ve
.PP
Returns a JsonSQL::Error object on failure.
.SS "ObjectMethod get_tables \-> \e@tablesArray"
.IX Subsection "ObjectMethod get_tables -> @tablesArray"
Generates parameters represented by the object for the \s-1SQL\s0 statement. Returns:
.PP
.Vb 1
\&    $tablesArray           => Arrayref of table identifiers to use for the query. Constructed from child L<JsonSQL::Param::Table> objects.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Hoefler <bhoefler@draper.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2017 by Chris Hoefler.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
